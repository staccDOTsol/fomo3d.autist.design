{"version":3,"sources":["constants/item.ts","constants/matches.ts","constants/namespace.ts","constants/player.ts","utils/ata.ts","constants/programIds.ts","utils/pda.ts","utils/connection.ts","utils/transactions.ts","state/matches.ts","contract/matches.ts","Home.tsx","App.tsx","index.tsx"],"names":["PREFIX","MARKER","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","web3","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","NAMESPACE_ID","PublicKey","ITEM_ID","PLAYER_ID","MATCHES_ID","TOKEN_METADATA_PROGRAM_ID","getAtaForMint","mint","wallet","findProgramAddress","toBuffer","getMatch","oracle","MATCHES_PREFIX","getMatchTokenAccountEscrow","tokenMint","tokenOwner","getOracle","seed","getItemPDA","index","ITEM_PREFIX","toArrayLike","getPlayerPDA","PLAYER_PREFIX","CLUSTERS","name","url","clusterApiUrl","DEFAULT_CLUSTER","getCluster","cluster","getUnixTs","Date","getTime","sleep","ms","Promise","resolve","setTimeout","MatchState","TokenTransferType","TokenType","sendTransactionWithRetry","connection","instructions","signers","commitment","transaction","Transaction","forEach","instruction","add","getLatestBlockhash","recentBlockhash","blockhash","feePayer","publicKey","length","partialSign","signTransaction","sendSignedTransaction","signedTransaction","timeout","rawTransaction","serialize","startTime","slot","sendRawTransaction","skipPreflight","txid","log","debug","done","awaitTransactionSignatureConfirmation","confirmation","Error","err","error","simulateResult","simulateTransaction","value","logs","i","line","startsWith","slice","JSON","stringify","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","queryStatus","status","confirmations","subId","reject","warn","onSignature","context","e","getSignatureStatuses","signatureStatuses","_subscriptionsByHash","removeSignatureListener","transformTokenValidations","tokenEntryValidation","map","r","newRFilter","filter","Object","k","y","validation","key","code","BN","MatchWrapper","program","object","this","MatchesInstruction","id","winOracle","match","methods","createMatch","accounts","matchInstance","provider","systemProgram","rent","additionalArgs","tfer","tokenDelta","tokenAccountEscrow","destinationTokenAccount","to","getAccountInfo","info","owner","equals","destinationTokenOwner","exists","unshift","disburseTokensByOracle","originalSender","tokenProgram","push","_args","drainMatch","authority","receiver","drainOracle","updateMatch","leaveMatch","sourceTokenAccount","transferAuthority","tokenTransferAuthority","Keypair","generate","Token","createApproveInstruction","amount","toNumber","joinMatch","sourceType","Any","Item","validationProgram","sourceItemOrPlayerPda","createRevokeInstruction","updateMatchFromOracle","clock","SYSVAR_CLOCK_PUBKEY","tokenTransfers","t","createOrUpdateOracle","MatchesProgram","matchPda","account","fetch","oracleAcct","coder","decode","oracleInstance","getMatchesProgram","anchorWallet","env","customRpcUrl","solConnection","Connection","NodeWallet","AnchorProvider","preflightCommitment","Program","fetchIdl","idl","Stage","ConnectButton","styled","Button","theme","typography","body2","padding","spacing","textAlign","color","WalletDialogButton","Paper","palette","text","secondary","resp","rpcUrl","Home","aha","fanoutSdk","useState","balance","setBalance","bet","setBet","winnerlol","setWinnerlol","wenEnd","setWenEnd","thePot","setThePot","useAnchorWallet","useWallet","PreBet","stage","setStage","msg","setMsg","confirmTransactionInitialTimeout","FanoutClient","hmm138","sigh","axios","get","Math","floor","template","tokensToJoin","console","setInterval","initStage","RevealPending","player","toBase58","risk","params","config","oracleState","setProvider","defaultOptions","anchorProgram","setup","tokenEntryValidationProof","hm","createTransferInstruction","ablarg","unstakeTokenMemberInstructions","fanout","member","req","query","walletKeyPair","ixs","getRecentBlockhash","sign","transactionSignature","fetchOracle","parseFloat","tokenDeltaProofInfo","aha2","instructions138","getParsedTokenAccountsByOwner","response","tbal","tokenAccount","getTokenAccountBalance","hmm","uiAmount","className","toLocaleString","Grid","container","item","xs","variant","onClick","PostBet","createTheme","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","undefined","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","wallets","getPhantomWallet","ThemeProvider","autoConnect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4491de81.chunk.js","sourcesContent":["// @ts-nocheck\nexport const PREFIX: string = \"item\";\nexport const MARKER: string = \"marker\";\n","// @ts-nocheck\nexport const PREFIX = \"matches\";\n","// @ts-nocheck\nexport const PREFIX: string = \"namespace\";\n","// @ts-nocheck\nexport const PREFIX: string = \"player\";\n","// @ts-nocheck\nimport { web3 } from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID } from \"../constants/programIds\";\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: web3.PublicKey,\n  payer: web3.PublicKey,\n  walletAddress: web3.PublicKey,\n  splTokenMintAddress: web3.PublicKey\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","// @ts-nocheck\nimport { web3 } from \"@project-serum/anchor\";\n\nexport const NAMESPACE_ID = new web3.PublicKey(\n  \"nameAxQRRBnd4kLfsVoZBBXfrByZdZTkh8mULLxLyqV\"\n);\n\nexport const ITEM_ID = new web3.PublicKey(\n  \"itemX1XWs9dK8T2Zca4vEEPfCAhRc7yvYFntPjTTVx6\"\n);\n\nexport const PLAYER_ID = new web3.PublicKey(\n  \"p1exdMJcjVao65QdewkaZRUnU6VPSXhus9n2GzWfh98\"\n);\n\nexport const MATCHES_ID = new web3.PublicKey(\n  \"mtchsiT6WoLQ62fwCoiHMCfXJzogtfru4ovY8tXKrjJ\"\n);\n\nexport const WRAPPED_SOL_MINT = new web3.PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\n\nexport const TOKEN_PROGRAM_ID = new web3.PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nexport const TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n","// @ts-nocheck\nimport { web3, BN } from \"@project-serum/anchor\";\nimport {\n  TOKEN_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  NAMESPACE_ID,\n  ITEM_ID,\n  TOKEN_METADATA_PROGRAM_ID,\n  MATCHES_ID,\n  PLAYER_ID,\n} from \"../constants/programIds\";\nimport { PREFIX as ITEM_PREFIX, MARKER } from \"../constants/item\";\nimport { PREFIX as MATCHES_PREFIX } from \"../constants/matches\";\nimport { PREFIX as NAMESPACE_PREFIX } from \"../constants/namespace\";\nimport { PREFIX as PLAYER_PREFIX } from \"../constants/player\";\n\nexport const getAtaForMint = async (\n  mint: web3.PublicKey,\n  wallet: web3.PublicKey\n): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n};\n\nexport const getMatch = async (\n  oracle: web3.PublicKey\n): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [Buffer.from(MATCHES_PREFIX), oracle.toBuffer()],\n    MATCHES_ID\n  );\n};\n\nexport const getMatchTokenAccountEscrow = async (\n  oracle: web3.PublicKey,\n  tokenMint: web3.PublicKey,\n  tokenOwner: web3.PublicKey\n): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(MATCHES_PREFIX),\n      oracle.toBuffer(),\n      tokenMint.toBuffer(),\n      tokenOwner.toBuffer(),\n    ],\n    MATCHES_ID\n  );\n};\n\nexport const getOracle = async (\n  seed: web3.PublicKey,\n  payer: web3.PublicKey\n): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [Buffer.from(MATCHES_PREFIX), payer.toBuffer(), seed.toBuffer()],\n    MATCHES_ID\n  );\n};\n\nexport const getNamespacePDA = async (\n  mint: web3.PublicKey\n): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [Buffer.from(NAMESPACE_PREFIX), mint.toBuffer()],\n    NAMESPACE_ID\n  );\n};\n\nexport const getItemPDA = async (\n  mint: web3.PublicKey,\n  index: BN\n): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [Buffer.from(ITEM_PREFIX), mint.toBuffer(), index.toArrayLike(Buffer, \"le\", 8)],\n    ITEM_ID\n  );\n};\n\nexport const getPlayerPDA = async (\n  mint: web3.PublicKey,\n  index: BN\n): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [Buffer.from(PLAYER_PREFIX), mint.toBuffer(), index.toArrayLike(Buffer, \"le\", 8)],\n    PLAYER_ID\n  );\n};\n\nexport const getItemActivationMarker = async (args: {\n  itemMint: web3.PublicKey;\n  index: BN;\n  usageIndex: BN;\n  amount: BN;\n}): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(ITEM_PREFIX),\n      args.itemMint.toBuffer(),\n      args.index.toArrayLike(Buffer, \"le\", 8),\n      args.usageIndex.toArrayLike(Buffer, \"le\", 8),\n      args.amount.toArrayLike(Buffer, \"le\", 8),\n      Buffer.from(MARKER),\n    ],\n    ITEM_ID\n  );\n};\n\nexport const getCraftItemCounter = async (args: {\n  itemClassMint: web3.PublicKey;\n  newItemMint: web3.PublicKey;\n  craftItemMint: web3.PublicKey;\n  componentScope: String;\n  craftItemIndex: BN;\n  craftEscrowIndex: BN;\n  classIndex: BN;\n}): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(ITEM_PREFIX),\n      args.itemClassMint.toBuffer(),\n      args.classIndex.toArrayLike(Buffer, \"le\", 8),\n      args.newItemMint.toBuffer(),\n      args.craftEscrowIndex.toArrayLike(Buffer, \"le\", 8),\n      args.craftItemIndex.toArrayLike(Buffer, \"le\", 8),\n      args.craftItemMint.toBuffer(),\n      Buffer.from(args.componentScope),\n    ],\n    ITEM_ID\n  );\n};\n\nexport const getCraftItemEscrow = async (args: {\n  itemClassMint: web3.PublicKey;\n  payer: web3.PublicKey;\n  newItemMint: web3.PublicKey;\n  craftItemToken: web3.PublicKey;\n  craftItemMint: web3.PublicKey;\n  amountToMake: BN;\n  amountToContributeFromThisContributor: BN;\n  componentScope: String;\n  craftIndex: BN;\n  classIndex: BN;\n  craftEscrowIndex: BN;\n}): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(ITEM_PREFIX),\n      args.itemClassMint.toBuffer(),\n      args.classIndex.toArrayLike(Buffer, \"le\", 8),\n      args.payer.toBuffer(),\n      args.newItemMint.toBuffer(),\n      args.craftItemToken.toBuffer(),\n      args.craftEscrowIndex.toArrayLike(Buffer, \"le\", 8),\n      args.craftIndex.toArrayLike(Buffer, \"le\", 8),\n      args.craftItemMint.toBuffer(),\n      args.amountToMake.toArrayLike(Buffer, \"le\", 8),\n      args.amountToContributeFromThisContributor.toArrayLike(Buffer, \"le\", 8),\n      Buffer.from(args.componentScope),\n    ],\n    ITEM_ID\n  );\n};\n\nexport const getItemEscrow = async (args: {\n  itemClassMint: web3.PublicKey;\n  payer: web3.PublicKey;\n  newItemMint: web3.PublicKey;\n  newItemToken: web3.PublicKey;\n  amountToMake: BN;\n  componentScope: String;\n  craftEscrowIndex: BN;\n  classIndex: BN;\n}): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(ITEM_PREFIX),\n      args.itemClassMint.toBuffer(),\n      args.classIndex.toArrayLike(Buffer, \"le\", 8),\n      args.payer.toBuffer(),\n      args.newItemMint.toBuffer(),\n      args.newItemToken.toBuffer(),\n      args.craftEscrowIndex.toArrayLike(Buffer, \"le\", 8),\n      args.amountToMake.toArrayLike(Buffer, \"le\", 8),\n      Buffer.from(args.componentScope),\n    ],\n    ITEM_ID\n  );\n};\n\nexport const getMetadata = async (\n  mint: web3.PublicKey\n): Promise<web3.PublicKey> => {\n  return (\n    await web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const getEdition = async (\n  mint: web3.PublicKey\n): Promise<web3.PublicKey> => {\n  return (\n    await web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n","// @ts-nocheck\nimport { clusterApiUrl } from \"@solana/web3.js\";\n\ntype Cluster = {\n  name: string;\n  url: string;\n};\nexport const CLUSTERS: Cluster[] = [\n  {\n    name: \"mainnet-beta\",\n    url: \"https://api.metaplex.solana.com/\",\n  },\n  {\n    name: \"testnet\",\n    url: clusterApiUrl(\"testnet\"),\n  },\n  {\n    name: \"mainnet-beta\",\n    url: clusterApiUrl(\"mainnet-beta\"),\n  },\n];\nexport const DEFAULT_CLUSTER = CLUSTERS[2];\nexport function getCluster(name: string): string {\n  for (const cluster of CLUSTERS) {\n    if (cluster.name === name) {\n      return cluster.url;\n    }\n  }\n  return DEFAULT_CLUSTER.url;\n}\n","// @ts-nocheck\nimport { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport {\n  Blockhash,\n  Commitment,\n  Connection,\n  FeeCalculator,\n  Keypair,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n} from \"@solana/web3.js\";\nimport log from \"loglevel\";\n\nexport const DEFAULT_TIMEOUT = 15000;\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const sendTransactionWithRetryWithKeypair = async (\n  connection: Connection,\n  wallet: Keypair,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void\n) => {\n  const transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.sign(...[wallet, ...signers]);\n  } else {\n    transaction.sign(wallet);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport async function sendTransactionWithRetry(\n  connection: Connection,\n  wallet: Wallet,\n  instructions: Array<TransactionInstruction>,\n  signers: Array<Keypair>,\n  commitment: Commitment = \"singleGossip\"\n): Promise<string | { txid: string; slot: number }> {\n  const transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    await connection.getLatestBlockhash(commitment)\n  ).blockhash;\n\n  transaction.feePayer = wallet.publicKey;\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n\n  wallet.signTransaction(transaction);\n\n  return sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n}\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    }\n  );\n\n  log.debug(\"Started awaiting confirmation for\", txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      \"recent\",\n      true\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n\n    if (confirmation.err) {\n      log.error(confirmation.err);\n      throw new Error(\"Transaction failed: Custom instruction error\");\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err) {\n    log.error(\"Timeout Error caught\", err);\n    if (err.timeout) {\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, \"single\")\n      ).value;\n    } catch (e) {\n      log.error(\"Simulate Transaction error\", e);\n    }\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith(\"Program log: \")) {\n            throw new Error(\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    log.error(\"Got this far.\");\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  log.debug(\"Latency (ms)\", txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection.getLatestBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config: any = { encoding: \"base64\", commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\n  if (res.error) {\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = \"recent\",\n  queryStatus = false\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  // eslint-disable-next-line no-async-promise-executor\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      log.warn(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            log.warn(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            log.debug(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      log.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              log.debug(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              log.error(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              log.debug(\"REST no confirmations for\", txid, status);\n            } else {\n              log.debug(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            log.error(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._subscriptionsByHash[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  log.debug(\"Returning status\", status);\n  return status;\n}\n","// @ts-nocheck\nimport { web3, BN } from \"@project-serum/anchor\";\nimport { Callback } from \"./common\";\n\nexport interface AnchorMatchState {\n  draft?: boolean;\n  initialized?: boolean;\n  started?: boolean;\n  finalized?: boolean;\n  paidOut?: boolean;\n  deactivated?: boolean;\n}\n\nexport interface AnchorTokenEntryValidation {\n  filter: AnchorFilter;\n  isBlacklist: boolean;\n  validation: null | Callback;\n}\n\nexport interface AnchorFilter {\n  none?: boolean;\n  all?: boolean;\n  namespace?: { namespace: web3.PublicKey };\n  parent?: { key: web3.PublicKey };\n  mint?: { mint: web3.PublicKey };\n}\n\nexport enum MatchState {\n  Draft,\n  Initialized,\n  Started,\n  Finalized,\n  PaidOut,\n  Deactivated,\n}\n\nexport enum TokenTransferType {\n  PlayerToPlayer,\n  PlayerToEntrant,\n  Normal,\n}\n\nexport enum TokenType {\n  Player,\n  Item,\n  Any,\n}\n\nexport interface AnchorTokenTransferType {\n  playerToPlayer?: boolean;\n  playerToEntrant?: boolean;\n  normal?: boolean;\n}\nexport interface AnchorTokenDelta {\n  from: web3.PublicKey;\n  to: web3.PublicKey | null;\n  tokenTransferType: AnchorTokenTransferType;\n  mint: web3.PublicKey;\n  amount: BN;\n}\n","import {\n  web3,\n  Program,\n  BN,\n  Provider,\n  AnchorProvider,\n} from \"@project-serum/anchor\";\nimport { SystemProgram } from \"@solana/web3.js\";\n\nimport NodeWallet from \"@project-serum/anchor/dist/cjs/nodewallet\";\nimport { MATCHES_ID, TOKEN_PROGRAM_ID } from \"../constants/programIds\";\nimport {\n  getAtaForMint,\n  getItemPDA,\n  getMatch,\n  getMatchTokenAccountEscrow,\n  getOracle,\n  getPlayerPDA,\n} from \"../utils/pda\";\nimport { ObjectWrapper } from \"./common\";\nimport log from \"loglevel\";\nimport { getCluster } from \"../utils/connection\";\nimport { sendTransactionWithRetry } from \"../utils/transactions\";\nimport {\n  AnchorMatchState,\n  AnchorTokenDelta,\n  AnchorTokenEntryValidation,\n  TokenType,\n} from \"../state/matches\";\nimport { Token } from \"@solana/spl-token\";\nimport { createAssociatedTokenAccountInstruction } from \"../utils/ata\";\n\nexport function transformTokenValidations(args: {\n  tokenEntryValidation: AnchorTokenEntryValidation[] | null;\n}) {\n  if (args.tokenEntryValidation) {\n    args.tokenEntryValidation = args.tokenEntryValidation.map((r) => {\n      const newRFilter = { ...r.filter };\n      Object.keys(newRFilter).forEach((k) => {\n        Object.keys(newRFilter[k]).forEach((y) => {\n          if (typeof newRFilter[k][y] === \"string\") {\n            newRFilter[k][y] = new web3.PublicKey(newRFilter[k][y]);\n          }\n        });\n      });\n\n      r.filter = newRFilter;\n\n      if (r.validation) {\n        if (typeof r.validation.key === \"string\") {\n          r.validation.key = new web3.PublicKey(r.validation.key);\n          r.validation.code = new BN(r.validation.code);\n        }\n      }\n      return r;\n    });\n  }\n}\nexport class MatchWrapper implements ObjectWrapper<any, MatchesProgram> {\n  program: MatchesProgram;\n  key: web3.PublicKey;\n  object: any;\n  data: Buffer;\n\n  constructor(args: {\n    program: MatchesProgram;\n    key: web3.PublicKey;\n    object: any;\n    data: Buffer;\n  }) {\n    this.program = args.program;\n    this.key = args.key;\n    this.object = args.object;\n    this.data = args.data;\n  }\n}\n\nexport interface CreateMatchArgs {\n  matchState: AnchorMatchState;\n  tokenEntryValidationRoot: null;\n  tokenEntryValidation: null | AnchorTokenEntryValidation[];\n  winOracle: web3.PublicKey;\n  winOracleCooldown: BN;\n  authority: web3.PublicKey;\n  space: BN;\n  leaveAllowed: boolean;\n  joinAllowedDuringStart: boolean;\n  minimumAllowedEntryTime: BN | null;\n}\n\nexport interface UpdateMatchArgs {\n  matchState: AnchorMatchState;\n  tokenEntryValidationRoot: null;\n  tokenEntryValidation: null;\n  winOracleCooldown: BN;\n  authority: web3.PublicKey;\n  leaveAllowed: boolean;\n  joinAllowedDuringStart: boolean;\n  minimumAllowedEntryTime: BN | null;\n}\n\nexport interface JoinMatchArgs {\n  amount: BN;\n  tokenEntryValidationProof: null;\n  tokenEntryValidation: null;\n}\n\nexport interface LeaveMatchArgs {\n  amount: BN;\n}\n\nexport interface DisburseTokensByOracleArgs {\n  tokenDeltaProofInfo: null;\n}\n\nexport interface CreateMatchAdditionalArgs {\n  seed: string;\n  finalized: boolean;\n  tokenTransferRoot: null;\n  tokenTransfers: null | AnchorTokenDelta[];\n}\n\nexport interface CreateOrUpdateOracleArgs {\n  seed: string;\n  authority: web3.PublicKey;\n  space: BN;\n  finalized: boolean;\n  tokenTransferRoot: null;\n  tokenTransfers: null | AnchorTokenDelta[];\n}\n\nexport interface DrainMatchArgs {}\n\nexport interface DrainOracleArgs {\n  seed: string;\n  authority: web3.PublicKey;\n}\n\nexport interface UpdateMatchFromOracleAccounts {\n  winOracle: web3.PublicKey;\n}\n\nexport interface UpdateMatchAccounts {\n  winOracle: web3.PublicKey;\n}\n\nexport interface DrainMatchAccounts {\n  receiver: web3.PublicKey | null;\n}\n\nexport interface DrainOracleAccounts {\n  receiver: web3.PublicKey | null;\n}\n\nexport interface DisburseTokensByOracleAccounts {\n  winOracle: web3.PublicKey;\n}\n\nexport interface JoinMatchAccounts {\n  tokenMint: web3.PublicKey;\n  sourceTokenAccount: web3.PublicKey | null;\n  tokenTransferAuthority: web3.Keypair | null;\n  validationProgram: web3.PublicKey | null;\n}\n\nexport interface LeaveMatchAccounts {\n  tokenMint: web3.PublicKey;\n  receiver: web3.PublicKey;\n}\n\nexport interface JoinMatchAdditionalArgs {\n  sourceType: TokenType;\n  index: BN | null;\n  winOracle: web3.PublicKey;\n}\n\nexport interface LeaveMatchAdditionalArgs {\n  winOracle: web3.PublicKey;\n}\n\nexport interface DrainMatchAdditionalArgs {\n  winOracle: web3.PublicKey;\n}\n\nexport interface DisburseTokensByOracleAdditionalArgs {\n  tokenDelta: AnchorTokenDelta;\n}\n\nexport class MatchesInstruction {\n  id: web3.PublicKey;\n  program: Program;\n\n  constructor(args: { id: web3.PublicKey; program: Program }) {\n    this.id = args.id;\n    this.program = args.program;\n  }\n\n  async createMatch(\n    args: CreateMatchArgs,\n    _accounts = {},\n    _additionalArgs = {}\n  ) {\n    const [match, _matchBump] = await getMatch(args.winOracle);\n\n    transformTokenValidations(args);\n    return {\n      instructions: [\n        await this.program.methods\n          .createMatch(args)\n          .accounts({\n            matchInstance: match,\n            payer: (this.program.provider as AnchorProvider).wallet.publicKey,\n            systemProgram: SystemProgram.programId,\n            rent: web3.SYSVAR_RENT_PUBKEY,\n          })\n          .instruction(),\n      ],\n      signers: [],\n    };\n  }\n\n  async disburseTokensByOracle(\n    args: DisburseTokensByOracleArgs,\n    accounts: DisburseTokensByOracleAccounts,\n    additionalArgs: DisburseTokensByOracleAdditionalArgs\n  ) {\n    const match = (await getMatch(accounts.winOracle))[0];\n    const tfer = additionalArgs.tokenDelta;\n\n    const [tokenAccountEscrow, _escrowBump] = await getMatchTokenAccountEscrow(\n      accounts.winOracle,\n      tfer.mint,\n      tfer.from\n    );\n\n    let destinationTokenAccount = tfer.to;\n    const info = await (\n      this.program.provider as AnchorProvider\n      // @ts-ignore\n    ).connection.getAccountInfo(destinationTokenAccount);\n\n    const instructions = [];\n\n      // @ts-ignore\n    if (!info.owner.equals(TOKEN_PROGRAM_ID)) {\n      const destinationTokenOwner = destinationTokenAccount;\n      destinationTokenAccount = (\n        // @ts-ignore\n        await getAtaForMint(tfer.mint, destinationTokenAccount)\n      )[0];\n\n      const exists = await (\n        this.program.provider as AnchorProvider\n      ).connection.getAccountInfo(destinationTokenAccount);\n\n      if (!exists || exists.data.length == 0) {\n        instructions.unshift(\n          // @ts-ignore\n          createAssociatedTokenAccountInstruction(\n            destinationTokenAccount,\n            (this.program.provider as AnchorProvider).wallet.publicKey,\n            // @ts-ignore\n            destinationTokenOwner,\n            tfer.mint\n          )\n        );\n      }\n    }\n\n    instructions.push(\n      // @ts-ignore\n      await this.program.methods\n        .disburseTokensByOracle(args)\n        .accounts({\n          matchInstance: match,\n          tokenAccountEscrow,\n          tokenMint: tfer.mint,\n          originalSender: tfer.from,\n          // @ts-ignore\n          destinationTokenAccount,\n          winOracle: accounts.winOracle,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n        })\n        .instruction()\n    );\n    return {\n      instructions,\n      signers: [],\n    };\n  }\n\n  async drainMatch(\n    _args: DrainMatchArgs,\n    accounts: DrainMatchAccounts,\n    additionalArgs: DrainMatchAdditionalArgs\n  ) {\n    const match = (await getMatch(additionalArgs.winOracle))[0];\n\n    return {\n      instructions: [\n        await this.program.methods\n          .drainMatch()\n          .accounts({\n            matchInstance: match,\n            authority: (this.program.provider as AnchorProvider).wallet\n              .publicKey,\n            receiver:\n              accounts.receiver ||\n              (this.program.provider as AnchorProvider).wallet.publicKey,\n          })\n          .instruction(),\n      ],\n      signers: [],\n    };\n  }\n\n  async drainOracle(\n    args: DrainOracleArgs,\n    accounts: DrainOracleAccounts,\n    _additionalArgs = {}\n  ) {\n    const [oracle, oracleBump] = await getOracle(\n      new web3.PublicKey(args.seed),\n      new web3.PublicKey(args.authority)\n    );\n\n    const [match, _matchBump] = await getMatch(oracle);\n\n    return {\n      instructions: [\n        await this.program.methods\n          .drainOracle({ ...args, seed: new web3.PublicKey(args.seed) })\n          .accounts({\n            matchInstance: match,\n            authority: (this.program.provider as AnchorProvider).wallet\n              .publicKey,\n            receiver:\n              accounts.receiver ||\n              (this.program.provider as AnchorProvider).wallet.publicKey,\n            oracle,\n          })\n          .instruction(),\n      ],\n      signers: [],\n    };\n  }\n  async updateMatch(\n    args: UpdateMatchArgs,\n    accounts: UpdateMatchAccounts,\n    _additionalArgs = {}\n  ) {\n    const match = (await getMatch(accounts.winOracle))[0];\n    transformTokenValidations(args);\n\n    return {\n      instructions: [\n        await this.program.methods\n          .updateMatch(args)\n          .accounts({\n            matchInstance: match,\n            winOracle: accounts.winOracle,\n            authority: (this.program.provider as AnchorProvider).wallet\n              .publicKey,\n          })\n          .instruction(),\n      ],\n      signers: [],\n    };\n  }\n\n  async leaveMatch(\n    args: LeaveMatchArgs,\n    accounts: LeaveMatchAccounts,\n    additionalArgs: LeaveMatchAdditionalArgs\n  ) {\n    const match = (await getMatch(additionalArgs.winOracle))[0];\n\n    const destinationTokenAccount = (\n      await getAtaForMint(accounts.tokenMint, accounts.receiver)\n    )[0];\n\n    const [tokenAccountEscrow, _escrowBump] = await getMatchTokenAccountEscrow(\n      additionalArgs.winOracle,\n      accounts.tokenMint,\n      (this.program.provider as AnchorProvider).wallet.publicKey\n    );\n\n    const signers = [];\n\n    return {\n      instructions: [\n        await this.program.methods\n          .leaveMatch(args)\n          .accounts({\n            matchInstance: match,\n            tokenAccountEscrow,\n            tokenMint: accounts.tokenMint,\n            destinationTokenAccount,\n            receiver: (this.program.provider as AnchorProvider).wallet\n              .publicKey,\n            tokenProgram: TOKEN_PROGRAM_ID,\n          })\n          .instruction(),\n      ],\n      signers,\n    };\n  }\n\n  async joinMatch(\n    args: JoinMatchArgs,\n    accounts: JoinMatchAccounts,\n    additionalArgs: JoinMatchAdditionalArgs\n  ) {\n    const match = (await getMatch(additionalArgs.winOracle))[0];\n\n    const sourceTokenAccount =\n      accounts.sourceTokenAccount ||\n      (\n        await getAtaForMint(\n          accounts.tokenMint,\n          (this.program.provider as AnchorProvider).wallet.publicKey\n        )\n      )[0];\n    const transferAuthority =\n      accounts.tokenTransferAuthority || web3.Keypair.generate();\n\n    const [tokenAccountEscrow, _escrowBump] = await getMatchTokenAccountEscrow(\n      additionalArgs.winOracle,\n      accounts.tokenMint,\n      (this.program.provider as AnchorProvider).wallet.publicKey\n    );\n\n    const signers = [transferAuthority];\n\n    return {\n      instructions: [\n        Token.createApproveInstruction(\n          TOKEN_PROGRAM_ID,\n          sourceTokenAccount,\n          transferAuthority.publicKey,\n          (this.program.provider as AnchorProvider).wallet.publicKey,\n          [],\n          args.amount.toNumber()\n        ),\n        await this.program.methods\n          .joinMatch(args)\n          .accounts({\n            matchInstance: match,\n            tokenTransferAuthority: transferAuthority.publicKey,\n            tokenAccountEscrow,\n            tokenMint: accounts.tokenMint,\n            sourceTokenAccount,\n            sourceItemOrPlayerPda:\n              additionalArgs.sourceType == TokenType.Any\n                ? SystemProgram.programId\n                : additionalArgs.sourceType == TokenType.Item\n                ? (\n                  // @ts-ignore\n                    await getItemPDA(accounts.tokenMint, additionalArgs.index)\n                  )[0]\n                : (\n                  // @ts-ignore\n                    await getPlayerPDA(accounts.tokenMint, additionalArgs.index)\n                  )[0],\n            payer: (this.program.provider as AnchorProvider).wallet.publicKey,\n            systemProgram: SystemProgram.programId,\n            validationProgram:\n              accounts.validationProgram || SystemProgram.programId,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            rent: web3.SYSVAR_RENT_PUBKEY,\n          })\n          .signers(signers)\n          .instruction(),\n        Token.createRevokeInstruction(\n          TOKEN_PROGRAM_ID,\n          sourceTokenAccount,\n          (this.program.provider as AnchorProvider).wallet.publicKey,\n          []\n        ),\n      ],\n      signers,\n    };\n  }\n\n  async updateMatchFromOracle(\n    args = {},\n    accounts: UpdateMatchFromOracleAccounts,\n    _additionalArgs = {}\n  ) {\n    const match = (await getMatch(accounts.winOracle))[0];\n\n    return {\n      instructions: [\n        await this.program.methods\n          .updateMatchFromOracle()\n          .accounts({\n            matchInstance: match,\n            winOracle: accounts.winOracle,\n            authority: (this.program.provider as AnchorProvider).wallet\n              .publicKey,\n            clock: web3.SYSVAR_CLOCK_PUBKEY,\n          })\n          .instruction(),\n      ],\n      signers: [],\n    };\n  }\n\n  async createOrUpdateOracle(\n    args: CreateOrUpdateOracleArgs,\n    _accounts = {},\n    _additionalArgs = {}\n  ) {\n    const [oracle, _oracleBump] = await getOracle(\n      new web3.PublicKey(args.seed),\n      args.authority\n    );\n\n    const tokenTransfers = args.tokenTransfers\n      ? args.tokenTransfers.map((t) => ({\n          ...t,\n          from: new web3.PublicKey(t.from),\n          to: t.to ? new web3.PublicKey(t.to) : null,\n          mint: new web3.PublicKey(t.mint),\n          amount: new BN(t.amount),\n        }))\n      : null;\n\n    return {\n      instructions: [\n        await this.program.methods\n          .createOrUpdateOracle({\n            ...args,\n            tokenTransfers,\n            seed: new web3.PublicKey(args.seed),\n          })\n          .accounts({\n            oracle,\n            payer: (this.program.provider as AnchorProvider).wallet.publicKey,\n            systemProgram: SystemProgram.programId,\n            rent: web3.SYSVAR_RENT_PUBKEY,\n          })\n          .instruction(),\n      ],\n      signers: [],\n    };\n  }\n}\n\nexport class MatchesProgram {\n  id: web3.PublicKey;\n  program: Program;\n  instruction: MatchesInstruction;\n\n  constructor(args: { id: web3.PublicKey; program: Program }) {\n    this.id = args.id;\n    this.program = args.program;\n    this.instruction = new MatchesInstruction({\n      id: this.id,\n      program: this.program,\n    });\n  }\n\n  async fetchMatch(oracle: web3.PublicKey): Promise<MatchWrapper> {\n    const matchPda = (await getMatch(oracle))[0];\n\n    const match = await this.program.account.match.fetch(matchPda);\n\n    return new MatchWrapper({\n      program: this,\n      key: matchPda,\n      data: match.data as Buffer,\n      object: match,\n    });\n  }\n\n  async fetchOracle(oracle: web3.PublicKey): Promise<MatchWrapper> {\n    const oracleAcct = await (\n      this.program.provider as AnchorProvider\n    ).connection.getAccountInfo(oracle);\n\n    const oracleInstance =\n      await this.program.account.winOracle.coder.accounts.decode(\n        \"WinOracle\",\n        // @ts-ignore\n        oracleAcct.data\n      );\n\n    return new MatchWrapper({\n      program: this,\n      key: oracle,\n      // @ts-ignore\n      data: oracleAcct.data,\n      object: oracleInstance,\n    });\n  }\n\n  async createMatch(\n    args: CreateMatchArgs,\n    _accounts = {},\n    additionalArgs: CreateMatchAdditionalArgs\n  ) {\n    const { instructions, signers } = await this.instruction.createMatch(args);\n\n    await sendTransactionWithRetry(\n      (this.program.provider as AnchorProvider).connection,\n      (this.program.provider as AnchorProvider).wallet,\n      instructions,\n      signers\n    );\n  }\n\n  async disburseTokensByOracle(\n    args: DisburseTokensByOracleArgs,\n    accounts: DisburseTokensByOracleAccounts,\n    additionalArgs: DisburseTokensByOracleAdditionalArgs\n  ) {\n    const { instructions, signers } =\n      await this.instruction.disburseTokensByOracle(\n        args,\n        accounts,\n        additionalArgs\n      );\n\n      return {instructions,signers}\n    await sendTransactionWithRetry(\n      (this.program.provider as AnchorProvider).connection,\n      (this.program.provider as AnchorProvider).wallet,\n      instructions,\n      signers\n    );\n  }\n\n  async drainMatch(\n    args: DrainMatchArgs,\n    accounts: DrainMatchAccounts,\n    additionalArgs: DrainMatchAdditionalArgs\n  ) {\n    const { instructions, signers } = await this.instruction.drainMatch(\n      args,\n      accounts,\n      additionalArgs\n    );\n\n    await sendTransactionWithRetry(\n      (this.program.provider as AnchorProvider).connection,\n      (this.program.provider as AnchorProvider).wallet,\n      instructions,\n      signers\n    );\n  }\n\n  async drainOracle(\n    args: DrainOracleArgs,\n    accounts: DrainOracleAccounts,\n    _additionalArgs = {}\n  ) {\n    const { instructions, signers } = await this.instruction.drainOracle(\n      args,\n      accounts\n    );\n\n    await sendTransactionWithRetry(\n      (this.program.provider as AnchorProvider).connection,\n      (this.program.provider as AnchorProvider).wallet,\n      instructions,\n      signers\n    );\n  }\n\n  async joinMatch(\n    args: JoinMatchArgs,\n    accounts: JoinMatchAccounts,\n    additionalArgs: JoinMatchAdditionalArgs\n  ) {\n    const { instructions, signers } = await this.instruction.joinMatch(\n      args,\n      accounts,\n      additionalArgs\n    );\nreturn {instructions,signers}\n    await sendTransactionWithRetry(\n      (this.program.provider as AnchorProvider).connection,\n      (this.program.provider as AnchorProvider).wallet,\n      instructions,\n      signers\n    );\n  }\n\n  async leaveMatch(\n    args: LeaveMatchArgs,\n    accounts: LeaveMatchAccounts,\n    additionalArgs: LeaveMatchAdditionalArgs\n  ) {\n    const { instructions, signers } = await this.instruction.leaveMatch(\n      args,\n      accounts,\n      additionalArgs\n    );\n\n    return {instructions,signers}\n    await sendTransactionWithRetry(\n      (this.program.provider as AnchorProvider).connection,\n      (this.program.provider as AnchorProvider).wallet,\n      instructions,\n      signers\n    );\n  }\n\n  async updateMatch(\n    args: UpdateMatchArgs,\n    accounts: UpdateMatchAccounts,\n    _additionalArgs = {}\n  ) {\n    const { instructions, signers } = await this.instruction.updateMatch(\n      args,\n      accounts\n    );\n\n    await sendTransactionWithRetry(\n      (this.program.provider as AnchorProvider).connection,\n      (this.program.provider as AnchorProvider).wallet,\n      instructions,\n      signers\n    );\n  }\n\n  async updateMatchFromOracle(\n    args = {},\n    accounts: UpdateMatchFromOracleAccounts,\n    _additionalArgs = {}\n  ) {\n    const { instructions, signers } =\n      await this.instruction.updateMatchFromOracle(args, accounts);\n\n    await sendTransactionWithRetry(\n      (this.program.provider as AnchorProvider).connection,\n      (this.program.provider as AnchorProvider).wallet,\n      instructions,\n      signers\n    );\n  }\n\n  async createOrUpdateOracle(\n    args: CreateOrUpdateOracleArgs,\n    _accounts = {},\n    _additionalArgs = {}\n  ) {\n    const { instructions, signers } =\n      await this.instruction.createOrUpdateOracle(args);\n\n    await sendTransactionWithRetry(\n      (this.program.provider as AnchorProvider).connection,\n      (this.program.provider as AnchorProvider).wallet,\n      instructions,\n      signers\n    );\n  }\n}\n\nexport async function getMatchesProgram(\n  anchorWallet: NodeWallet | web3.Keypair,\n  env: string,\n  customRpcUrl: string\n): Promise<MatchesProgram> {\n  if (customRpcUrl) log.debug(\"USING CUSTOM URL\", customRpcUrl);\n\n  const solConnection = new web3.Connection(customRpcUrl || getCluster(env));\n\n  if (anchorWallet instanceof web3.Keypair)\n    anchorWallet = new NodeWallet(anchorWallet);\n\n  const provider = new AnchorProvider(solConnection, anchorWallet, {\n    preflightCommitment: \"recent\",\n  });\n\n  const idl = await Program.fetchIdl(MATCHES_ID, provider);\n\n      // @ts-ignore\n  const program = new Program(idl, MATCHES_ID, provider);\n\n  return new MatchesProgram({\n    id: MATCHES_ID,\n    program,\n  });\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { FanoutClient } from '@glasseaters/hydra-sdk'\n\nimport {\n  Connection,\n  Keypair,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  useAnchorWallet,\n  useConnection,\n  useWallet,\n} from \"@solana/wallet-adapter-react\";\n\nimport { styled } from \"@mui/material/styles\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  Button,\n  FilledInput,\n  FormControl,\n  InputAdornment,\n  InputLabel,\n  Link,\n} from \"@mui/material\";\nimport axios from \"axios\";\nimport { getMatchesProgram } from \"./contract/matches\";\nimport {\n  AnchorProvider,\n  BN,\n  getProvider,\n  setProvider,\n  web3,\n} from \"@project-serum/anchor\";\n\nimport { getOracle } from \"./utils/pda\";\nimport { TokenType } from \"./state/matches\";\nimport { sendTransactionWithRetryWithKeypair } from \"./transactions\";\nlet blabla;\nconst OtherBtn = styled(Button)(({ theme }) => ({\n  ...theme.typography.body2,\n  padding: theme.spacing(1),\n  textAlign: \"center\",\n  color: \"purple\",\n}));\n\nconst ConnectButton = styled(WalletDialogButton)``;\n// @ts-ignore\nconst Item = styled(Paper)(({ theme }) => ({\n  ...theme.typography.body2,\n  padding: theme.spacing(1),\n  textAlign: \"center\",\n  color: theme.palette.text.secondary,\n}));\n\nconst Stuff = styled(Paper)(({ theme }) => ({\n  ...theme.typography.body2,\n  padding: theme.spacing(1),\n  textAlign: \"center\",\n  color: \"black\",\n}));\n\nenum Stage {\n  PreBet,\n  PostBet,\n  RevealPending,\n}\nlet rpcUrl =\n  \"https://ssc-dao.genesysgo.net/\";\n  let resp: any\nconst Home = () => {\n  var aha: PublicKey\n  const [balance, setBalance] = useState<number>();\n  const [bet, setBet] = useState<number>(1);\n  const [winnerlol, setWinnerlol] = useState<string>(\"jare...gm\");\n  const [wenEnd, setWenEnd] = useState<string>(\"jare...gm\");\n  const [thePot, setThePot] = useState<number>(0);\n\n  const wallet = useAnchorWallet();\n  const wallet2 = useWallet();\n\n  const [stage, setStage] = useState<Stage>(Stage.PreBet);\n  const [uuid, setUuid] = useState<string | null>(null);\n  const [msg, setMsg] = useState<string>(\"\");\n  var fanoutSdk: FanoutClient\n\n  let connection = new Connection(rpcUrl, {\n    commitment: \"recent\",\n    confirmTransactionInitialTimeout: 360000,\n  });\n\n  if (wallet){     \n\n    const provider = new AnchorProvider(connection, wallet, {\n      preflightCommitment: 'processed',\n    });\n    fanoutSdk = new FanoutClient(\n      connection,\n      provider.wallet\n  );\n    }\n  const setBetAmount = (e: any) => {\n    try {\n      const num = parseFloat(e.target.value);\n      if (num >= 10) {\n        setBet(10);\n      } else if (num <= 0.1) {\n        setBet(0.1);\n      } else {\n        setBet(num);\n      }\n    } catch (e) {}\n  };\n  let sigh = false;\n  let hmm138: number\n  setTimeout(async function(){\n    try {\n       resp = await axios.get(\"https://fuckcors2.autist.design/wat\")\n  // @ts-ignore\n      setWinnerlol(resp.data.winnerlol)\n      // @ts-ignore\n          setWenEnd(new Date(resp.data.wenEnd).toString())\n          // @ts-ignore\n              setThePot((resp.data.thePot) / 10 ** 5)\n               hmm138 = (Math.floor(resp.data.template.tokensToJoin[0].amount / 10 ** 5)* 1.00) * 0.02\n      // @ts-ignore\n    setBet((Math.floor(resp.data.template.tokensToJoin[0].amount / 10 ** 5)* 1.00) + hmm138)\n      } catch (err){\n        console.log(err)\n      }\n  }, 1)\n  setInterval(async function(){\n    try {\n    const resp = await axios.get(\"https://fuckcors2.autist.design/wat\")\n// @ts-ignore\n    setWinnerlol(resp.data.winnerlol)\n    // @ts-ignore\n        setWenEnd(new Date(resp.data.wenEnd).toString()) \n        hmm138 = (Math.floor(resp.data.template.tokensToJoin[0].amount / 10 ** 5)* 1.00) * 0.02\n        // @ts-ignore\n      setBet((Math.floor(resp.data.template.tokensToJoin[0].amount / 10 ** 5)* 1.00) + hmm138)\n    } catch (err){\n      console.log(err)\n    }\n  }, 65000)\n  const initStage = async () => {\n    if (!wallet) return;\n    if (!bet) return;\n    if (!balance) return;\n\n    setMsg(\"\");\n    setStage(Stage.RevealPending);\n    /*\n    const instructions = [];\n    const localUuid = uuidv4().slice(0, 8);\n    setUuid(localUuid);\n    instructions.push(await initializeCoin(wallet, house, localUuid));\n    instructions.push(await mintCoin(wallet, bet, localUuid));\n    const txn = await sendTransactionWithRetryWithKeypair(solConnection, wallet, instructions, [], \"recent\", false);\n    */\n    console.log({\n      player: wallet.publicKey.toBase58(),\n      risk: bet * 10 ** 5,\n\n      // uuid: localUuid,\n      env: \"mainnet-beta\",\n    });\ntry {\n    var resp = await axios.get(\"https://fuckcors2.autist.design/becomeWinner\", {\n      //'https://warm-river-90393.herokuapp.com/reveal', {\n      params: {\n        player: wallet.publicKey.toBase58(),\n        risk: bet * 10 ** 5,\n\n        // uuid: localUuid,\n        env: \"mainnet-beta\",\n      },\n    });\n  } catch (err){\n    console.log(err)\n  \n    setBet(bet + 1)\n    \n      resp = await axios.get(\"https://fuckcors2.autist.design/becomeWinner\", {\n        //'https://warm-river-90393.herokuapp.com/reveal', {\n        params: {\n          player: wallet.publicKey.toBase58(),\n          risk: bet * 10 ** 5,\n  \n          // uuid: localUuid,\n          env: \"mainnet-beta\",\n        },\n      });\n    }\n    const config = resp.data;\n    console.log(config);\n    const winOracle =  (\n      await getOracle(\n        new web3.PublicKey(config.oracleState.seed),\n        new web3.PublicKey(config.oracleState.authority)\n      )\n    )[0]\n    console.log(winOracle.toBase58())\n    console.log(winOracle.toBase58())\n    console.log(winOracle.toBase58())\n    console.log(winOracle.toBase58())\n    //  const config = {\"winOracle\":null,\"matchState\":{\"initialized\":true},\"winOracleCooldown\":10,\"space\":300,\"minimumAllowedEntryTime\":null,\"tokenEntryValidation\":null,\"authority\":\"JARehRjGUkkEShpjzfuV4ERJS25j8XhamL776FAktNGm\",\"leaveAllowed\":false,\"joinAllowedDuringStart\":false,\"oracleState\":{\"seed\":\"52YkYFXbarQx4FKZjhghoFkfbbsVUqucsnmGhq94WxP1\",\"authority\":\"JARehRjGUkkEShpjzfuV4ERJS25j8XhamL776FAktNGm\",\"finalized\":false,\"tokenTransferRoot\":null,\"tokenTransfers\":[]},\"tokensToJoin\":[{\"mint\":\"rainH85N1vCoerCi4cQ3w6mCf7oYUdrsTFtFzpaRwjL\",\"amount\":1,\"sourceType\":1,\"index\":1,\"validationProgram\":\"nameAxQRRBnd4kLfsVoZBBXfrByZdZTkh8mULLxLyqV\"}]}\n    //    console.log(resp)\n    setProvider(new AnchorProvider(connection, wallet, AnchorProvider.defaultOptions()));\n    // @ts-ignore\n    const anchorProgram = await getMatchesProgram(\n      // @ts-ignore\n      wallet,\n      \"mainnet-beta\",\n      rpcUrl\n    );\n    let index = 0;\n\n    const setup = config.tokensToJoin[index];\n    setTimeout(async function () {\nsetStage(Stage.PreBet)\n    }, 9999)\n    let hm = await anchorProgram.joinMatch(\n      {\n        amount: new BN(setup.amount * 1.01),\n        tokenEntryValidation: null,\n        tokenEntryValidationProof: null,\n      },\n      {\n        tokenMint: new web3.PublicKey(setup.mint),\n        sourceTokenAccount: null,\n        tokenTransferAuthority: null,\n        validationProgram: setup.validationProgram\n          ? new web3.PublicKey(setup.validationProgram)\n          : null,\n      },\n      {\n        winOracle,\n        sourceType: setup.sourceType as TokenType,\n        index: new BN(setup.index),\n      }\n    );\n    // @ts-ignore\n\n    const transaction = new web3.Transaction().add(...hm.instructions);\nconsole.log(hmm138)\nconsole.log(hmm138)\n\nconsole.log(hmm138)\n\n\nconst ablarg = await Token.createTransferInstruction(TOKEN_PROGRAM_ID, aha, new PublicKey(\"GzecHD1g2vfNuRVC6p8D5jMYK4KPB3JnLoCkwssMZwuc\"),\nwallet.publicKey,\n[],\nhmm138 * 10 ** 5,\n)\n\ntry {\n  \n  const ixs = await fanoutSdk.unstakeTokenMemberInstructions({\n    // @ts-ignore\n  fanout: fanout,\n  // @ts-ignore\n  member: new PublicKey(req.query.player as string),\n  // @ts-ignore\n  payer: walletKeyPair.publicKey\n})\ntransaction.add(...ixs.instructions);\n} \ncatch (err){\n  console.log(err)\n}\n\ntransaction.add(ablarg)\n\n    transaction.feePayer = wallet.publicKey;\n    transaction.recentBlockhash = (\n      await connection.getRecentBlockhash()\n    ).blockhash;\n    // @ts-ignore\n    await transaction.sign(...hm.signers);\n    await wallet.signTransaction(transaction);\n    const transactionSignature = await connection.sendRawTransaction(\n      transaction.serialize(),\n      { skipPreflight: true }\n    );\n    console.log(transactionSignature)\n    sigh = false;\n\n    setTimeout(async function () {\n     \n      console.log(winOracle.toBase58());\n      const oracleInstance = await anchorProgram.fetchOracle(winOracle);\n      if (!sigh) {\n        console.log(stage);\n\n        console.log(oracleInstance.object);\n        if (oracleInstance.object.tokenTransfers.length > 0) {\n          sigh = true;\n          var tfer = oracleInstance.object.tokenTransfers[0];\n\n          try {\n            if (false){\n            var transaction = new web3.Transaction();\n            var didIWin = false \n            for (var ablarg in oracleInstance.object.tokenTransfers) {\n              var tfer = oracleInstance.object.tokenTransfers[ablarg];\n              if (tfer.from == wallet.publicKey.toBase58() || tfer.from == wallet.publicKey) {\n                console.log(tfer);\n                /*\n                tfer.from = new PublicKey(tfer.from);\n                tfer.to = new PublicKey(tfer.to);\n                tfer.mint = new PublicKey(tfer.mint);\n                tfer.amount = parseFloat(tfer.amount)\n                tfer.amount = new BN(tfer.amount)//.toNumber()\n                */\n               tfer.amount = parseFloat(tfer.amount)\n                console.log(tfer);\n                console.log(parseFloat(tfer.amount));\n                if (tfer.amount > 0){\n                  didIWin = true \n                }\n                blabla = false;\n                var aha2 = await anchorProgram.disburseTokensByOracle(\n                  {\n                    tokenDeltaProofInfo: null,\n                  },\n                  {\n                    winOracle,\n                  },\n                  {\n                    tokenDelta: tfer,\n                  }\n                );\n                var instructions138 = aha2.instructions;\n                transaction.add(...instructions138);\n                \n              }\n            }\n                transaction.feePayer = wallet.publicKey;\n                transaction.recentBlockhash = (\n                  await connection.getRecentBlockhash()\n                ).blockhash;\n\n                await wallet.signTransaction(transaction);\n\n                const transactionSignature =\n                  await connection.sendRawTransaction(transaction.serialize(), {\n                    skipPreflight: true,\n                  });\n                console.log(transactionSignature);\n            }\n                //setStage(Stage.PostBet)\n                setStage(Stage.PreBet)\n            setTimeout(async function () {\n              /*\n              var aha = await anchorProgram.leaveMatch(\n                {\n                  amount: didIWin ? new BN(bet * 9 ** 10 * 2) : new BN(0),\n                },\n                {\n                  tokenMint: new web3.PublicKey(setup.mint),\n                  receiver: wallet.publicKey,\n                },\n                {\n                  winOracle\n                }\n              );\n\n              var transaction = new web3.Transaction();\n              var signers = aha.signers;\n              var instructions = aha.instructions;\n\n              transaction.add(...instructions);\n              transaction.feePayer = wallet.publicKey;\n              transaction.recentBlockhash = (\n                await connection.getRecentBlockhash()\n              ).blockhash;\n              if (signers.length > 0) {\n                await transaction.sign(...signers);\n              }\n              await wallet.signTransaction(transaction);\n\n              const transactionSignature = await connection.sendRawTransaction(\n                transaction.serialize(),\n                { skipPreflight: true }\n              );\n              console.log(transactionSignature);\n              */\n              setStage(Stage.PreBet)\n            }, 12000);\n          } catch (err) {\n            console.log(err);\n          }\n        }\n      }\n    }, 12500);\n\n    //   setMsg(`You ${resp.data.status}!`);\n  };\n\n  setTimeout(async function () {\n    if (wallet) {\n      let response = await connection.getParsedTokenAccountsByOwner(\n        wallet?.publicKey as PublicKey,\n        {\n          mint: new PublicKey(\"rainH85N1vCoerCi4cQ3w6mCf7oYUdrsTFtFzpaRwjL\"),\n        }\n      );\n      let tbal = 0;\n      for (var tokenAccount of response.value) {\n        var hmm = (await connection.getTokenAccountBalance(tokenAccount.pubkey))\n        .value.uiAmount\n        // @ts-ignore\n        tbal += hmm;\n        // @ts-ignore\n          if (hmm > 0){\n            aha = tokenAccount.pubkey\n          }\n      }\n      setBalance(tbal);\n    }\n  }, 500);\n\n  return (\n    <>\n      <main className=\"container\">\n        {wallet && (\n          <p className=\"pp\">  \n            Balance: {(balance || 0).toLocaleString()} $RAIN\n          </p>\n        )}\n         <Item>\n                  \n                  {winnerlol} is winning! so long as nobody else becomesWinner before {wenEnd} \n                  \n              </Item>\n         <Item>\n                  \n                the pot is {thePot} $RAIN :D\n                  \n              </Item>\n        {wallet && stage == Stage.PreBet && (\n          <div>\n            <Grid container spacing={0}>\n              <Grid item xs={4}></Grid>\n              <Grid item xs={4}>\n               \n                <Item>\n                  <Button variant=\"outlined\" onClick={initStage}>\n                    {bet * 1.02 * 1.01} $RAIN\n                  </Button>\n                </Item>\n              </Grid>\n              <Grid item xs={4}></Grid>\n            </Grid>\n          </div>\n        )}\n        {!wallet && (\n          <div> <ConnectButton>Connect Wallet</ConnectButton>\n           \n          </div>\n        )}\n        \n\n{wallet && stage == Stage.PostBet && (\n          <div>\n          <Grid container spacing={0}>\n            <Grid item xs={4}></Grid>\n            <Grid item xs={4}>\n              <h1>Wait another half a min or 2 or so...</h1>\n            </Grid>\n            <Grid item xs={4}></Grid>\n          </Grid>\n        </div>\n        )}\n        {wallet && stage == Stage.RevealPending && (\n          <div>\n            <Grid container spacing={0}>\n              <Grid item xs={4}></Grid>\n              <Grid item xs={4}>\n                <h1>Cool, prob nothing...</h1>\n              </Grid>\n              <Grid item xs={4}></Grid>\n            </Grid>\n          </div>\n        )}\n        <Grid container spacing={0}>\n          <Grid item xs={4}></Grid>\n          <Grid item xs={4}>\n            <h2 className=\"pp\">{msg}</h2>\n          </Grid>\n          <Grid item xs={4}></Grid>\n        </Grid>\n      </main>\n    </>\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\n\nimport Home from \"./Home\";\n\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n  const endpoint = useMemo(() => \"https://ssc-dao.genesysgo.net/\"  , []);\n\n  const wallets = useMemo(\n    () => [\n        getPhantomWallet()\n    ],\n    []\n  );\n\n  return (\n      <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect={true}>\n            <WalletDialogProvider>\n              <Home/>\n            </WalletDialogProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}