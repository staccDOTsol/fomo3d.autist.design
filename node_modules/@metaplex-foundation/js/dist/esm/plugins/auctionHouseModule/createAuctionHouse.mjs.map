{"version":3,"file":"createAuctionHouse.mjs","sources":["../../../../src/plugins/auctionHouseModule/createAuctionHouse.ts"],"sourcesContent":["import { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  useOperation,\n  Operation,\n  Signer,\n  OperationHandler,\n  Pda,\n} from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport {\n  createCreateAuctionHouseInstructionWithSigners,\n  findAssociatedTokenAccountPda,\n  findAuctionHouseFeePda,\n  findAuctionHousePda,\n  findAuctionHouseTreasuryPda,\n} from '@/programs';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { WRAPPED_SOL_MINT } from './constants';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateAuctionHouseOperation' as const;\nexport const createAuctionHouseOperation =\n  useOperation<CreateAuctionHouseOperation>(Key);\nexport type CreateAuctionHouseOperation = Operation<\n  typeof Key,\n  CreateAuctionHouseInput,\n  CreateAuctionHouseOutput\n>;\n\nexport type CreateAuctionHouseInput = {\n  // Data.\n  sellerFeeBasisPoints: number;\n  requiresSignOff?: boolean;\n  canChangeSalePrice?: boolean;\n\n  // Accounts.\n  treasuryMint?: PublicKey;\n  payer?: Signer;\n  authority?: PublicKey;\n  feeWithdrawalDestination?: PublicKey;\n  treasuryWithdrawalDestinationOwner?: PublicKey;\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type CreateAuctionHouseOutput = {\n  response: SendAndConfirmTransactionResponse;\n  auctionHouse: Pda;\n  auctionHouseFeeAccount: Pda;\n  auctionHouseTreasury: Pda;\n  treasuryWithdrawalDestination: PublicKey;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const createAuctionHouseOperationHandler: OperationHandler<CreateAuctionHouseOperation> =\n  {\n    handle: async (\n      operation: CreateAuctionHouseOperation,\n      metaplex: Metaplex\n    ) => {\n      const builder = createAuctionHouseBuilder(metaplex, operation.input);\n\n      const response = await metaplex\n        .rpc()\n        .sendAndConfirmTransaction(\n          builder,\n          undefined,\n          operation.input.confirmOptions\n        );\n\n      return {\n        response,\n        ...builder.getContext(),\n      };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type CreateAuctionHouseBuilderParams = Omit<\n  CreateAuctionHouseInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\nexport type CreateAuctionHouseBuilderContext = Omit<\n  CreateAuctionHouseOutput,\n  'response'\n>;\n\nexport const createAuctionHouseBuilder = (\n  metaplex: Metaplex,\n  params: CreateAuctionHouseBuilderParams\n): TransactionBuilder<CreateAuctionHouseBuilderContext> => {\n  // Data.\n  const canChangeSalePrice = params.canChangeSalePrice ?? false;\n  const requiresSignOff = params.requiresSignOff ?? canChangeSalePrice;\n\n  // Accounts.\n  const authority = params.authority ?? metaplex.identity().publicKey;\n  const payer = params.payer ?? metaplex.identity();\n  const treasuryMint = params.treasuryMint ?? WRAPPED_SOL_MINT;\n  const treasuryWithdrawalDestinationOwner =\n    params.treasuryWithdrawalDestinationOwner ?? metaplex.identity().publicKey;\n  const feeWithdrawalDestination =\n    params.feeWithdrawalDestination ?? metaplex.identity().publicKey;\n\n  // PDAs.\n  const auctionHouse = findAuctionHousePda(authority, treasuryMint);\n  const auctionHouseFeeAccount = findAuctionHouseFeePda(auctionHouse);\n  const auctionHouseTreasury = findAuctionHouseTreasuryPda(auctionHouse);\n  const treasuryWithdrawalDestination = treasuryMint.equals(WRAPPED_SOL_MINT)\n    ? treasuryWithdrawalDestinationOwner\n    : findAssociatedTokenAccountPda(\n        treasuryMint,\n        treasuryWithdrawalDestinationOwner\n      );\n\n  return TransactionBuilder.make<CreateAuctionHouseBuilderContext>()\n    .setFeePayer(payer)\n    .setContext({\n      auctionHouse,\n      auctionHouseFeeAccount,\n      auctionHouseTreasury,\n      treasuryWithdrawalDestination,\n    })\n    .add(\n      createCreateAuctionHouseInstructionWithSigners({\n        treasuryMint,\n        payer,\n        authority,\n        feeWithdrawalDestination,\n        treasuryWithdrawalDestination,\n        treasuryWithdrawalDestinationOwner,\n        auctionHouse,\n        auctionHouseFeeAccount,\n        auctionHouseTreasury,\n        args: {\n          bump: auctionHouse.bump,\n          feePayerBump: auctionHouseFeeAccount.bump,\n          treasuryBump: auctionHouseTreasury.bump,\n          sellerFeeBasisPoints: params.sellerFeeBasisPoints,\n          requiresSignOff,\n          canChangeSalePrice,\n        },\n        instructionKey: params.instructionKey,\n      })\n    );\n};\n"],"names":["Key","createAuctionHouseOperation","useOperation","createAuctionHouseOperationHandler","handle","operation","metaplex","builder","createAuctionHouseBuilder","input","response","rpc","sendAndConfirmTransaction","undefined","confirmOptions","getContext","params","canChangeSalePrice","requiresSignOff","authority","identity","publicKey","payer","treasuryMint","WRAPPED_SOL_MINT","treasuryWithdrawalDestinationOwner","feeWithdrawalDestination","auctionHouse","findAuctionHousePda","auctionHouseFeeAccount","findAuctionHouseFeePda","auctionHouseTreasury","findAuctionHouseTreasuryPda","treasuryWithdrawalDestination","equals","findAssociatedTokenAccountPda","TransactionBuilder","make","setFeePayer","setContext","add","createCreateAuctionHouseInstructionWithSigners","args","bump","feePayerBump","treasuryBump","sellerFeeBasisPoints","instructionKey"],"mappings":"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"}